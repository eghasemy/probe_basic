name: Seed PB-Touch Phases as Issues

on:
  workflow_dispatch:
    inputs:
      epic_title:
        description: Title for the tracking epic
        type: string
        default: "Epic: PB-Touch (Probe Basic frontend with Masso G3 Touch features)"
      milestone:
        description: Milestone name (leave blank to skip)
        type: string
        default: "PB-Touch v0.1"
      label_prefix:
        description: Optional label prefix (e.g., team/component)
        type: string
        default: ""
      dry_run:
        description: If true, do not create or modify issues
        type: boolean
        default: false

permissions:
  contents: read
  issues: write

concurrency:
  group: seed-pb-touch-issues
  cancel-in-progress: false

jobs:
  seed:
    runs-on: ubuntu-latest
    steps:
      - name: Seed issues
        uses: actions/github-script@v7
        with:
          script: |
            // ---- Safe defaults for inputs (avoid undefined/empty) ----
            const epicTitle =
              (core.getInput('epic_title') || '').trim() ||
              'Epic: PB-Touch (Probe Basic frontend with Masso G3 Touch features)';

            const milestoneInput = (core.getInput('milestone') || '').trim();
            const milestoneName = milestoneInput; // may be ''
            const labelPrefixRaw = (core.getInput('label_prefix') || '').trim();
            const labelPrefix = labelPrefixRaw ? `${labelPrefixRaw}: ` : '';
            const dryRun = (core.getInput('dry_run') || '').toString().toLowerCase() === 'true';

            const owner = context.repo.owner;
            const repo = context.repo.repo;

            function log(msg){ core.info(String(msg)); }

            // ---- Guarded creator (ensures non-empty title) ----
            async function createOrGetIssue({ title, body, labels = [], milestoneNumber }) {
              const safeTitle = (title || '').trim();
              if (!safeTitle) {
                throw new Error('Refusing to create issue with blank title. Check phase spec or inputs.');
              }

              // Find existing by exact title
              const q = `repo:${owner}/${repo} is:issue in:title "${safeTitle.replace(/"/g, '\\"')}"`;
              const res = await github.rest.search.issuesAndPullRequests({ q });
              const existing = res.data.items.find(i => i.title === safeTitle && !i.pull_request);
              if (existing) {
                log(`Issue exists: #${existing.number} ${safeTitle}`);
                return existing;
              }

              if (dryRun) {
                log(`[DRY RUN] Would create issue: ${safeTitle}`);
                return { number: 0, title: safeTitle, html_url: '' };
              }

              const payload = { owner, repo, title: safeTitle, body: body || '', labels };
              if (typeof milestoneNumber === 'number') payload.milestone = milestoneNumber;

              const issue = (await github.rest.issues.create(payload)).data;
              log(`Created issue: #${issue.number} ${safeTitle}`);
              return issue;
            }

            // ---- Labels (unchanged) ----
            const labelsToEnsure = [
              `${labelPrefix}phase`,`${labelPrefix}ui`,`${labelPrefix}hal`,`${labelPrefix}wizards`,
              `${labelPrefix}atc`,`${labelPrefix}jobs`,`${labelPrefix}safety`,`${labelPrefix}settings`,
              `${labelPrefix}docs`,`${labelPrefix}good first issue`,`${labelPrefix}help wanted`
            ];

            async function ensureLabel(name, color='0e8a16', description='') {
              try { await github.rest.issues.getLabel({ owner, repo, name }); }
              catch {
                if (dryRun) return log(`[DRY RUN] Would create label: ${name}`);
                await github.rest.issues.createLabel({ owner, repo, name, color, description });
                log(`Created label: ${name}`);
              }
            }

            for (const l of labelsToEnsure) await ensureLabel(l);

            // ---- Milestone (optional, unchanged logic) ----
            async function ensureMilestone(title) {
              if (!title) return { number: undefined };
              const { data: milestones } = await github.rest.issues.listMilestones({ owner, repo, state: 'open' });
              let m = milestones.find(m => m.title === title);
              if (!m) {
                if (dryRun) { log(`[DRY RUN] Would create milestone: ${title}`); return { number: undefined }; }
                m = (await github.rest.issues.createMilestone({ owner, repo, title })).data;
                log(`Created milestone: ${title} (#${m.number})`);
              }
              return m;
            }

            const ms = await ensureMilestone(milestoneName);
            const milestoneNumber = (typeof ms.number === 'number') ? ms.number : undefined;

            // ---- Phase specs (unchanged titles, but we still defensively trim) ----
            const phases = [
              { title: 'Phase 0 — Bootstrap & Theming', labels: [`${labelPrefix}phase`, `${labelPrefix}ui`], body: `...` },
              { title: 'Phase 1 — Dashboard Parity (Masso Main)', labels: [`${labelPrefix}phase`, `${labelPrefix}ui`], body: `...` },
              { title: 'Phase 2 — Pin Mapper & Machine Config Wizard', labels: [`${labelPrefix}phase`, `${labelPrefix}ui`, `${labelPrefix}hal`], body: `...` },
              { title: 'Phase 3 — IO & Diagnostics, Jogging & MPG', labels: [`${labelPrefix}phase`, `${labelPrefix}ui`, `${labelPrefix}hal`], body: `...` },
              { title: 'Phase 4 — Probing & Tool Setting Wizards', labels: [`${labelPrefix}phase`, `${labelPrefix}wizards`], body: `...` },
              { title: 'Phase 5 — ATC Management', labels: [`${labelPrefix}phase`, `${labelPrefix}atc`, `${labelPrefix}hal`], body: `...` },
              { title: 'Phase 6 — Job Manager, File Browser & Conversational', labels: [`${labelPrefix}phase`, `${labelPrefix}jobs`], body: `...` },
              { title: 'Phase 7 — Safety, Homing, Limits, Overrides & Warmup', labels: [`${labelPrefix}phase`, `${labelPrefix}safety`], body: `...` },
              { title: 'Phase 8 — Offsets, Tool Table, Fixture Library', labels: [`${labelPrefix}phase`], body: `...` },
              { title: 'Phase 9 — Settings, Profiles & Network', labels: [`${labelPrefix}phase`, `${labelPrefix}settings`], body: `...` },
              { title: 'Phase 10 — Telemetry, Docs & Packaging', labels: [`${labelPrefix}phase`, `${labelPrefix}docs`], body: `...` },
              { title: 'Milestone — PB-Touch v0.1 Acceptance', labels: [`${labelPrefix}phase`], body: `...` }
            ];

            // ---- Epic (guarded) ----
            const epic = await createOrGetIssue({
              title: epicTitle,
              body: [
                'Tracking epic for PB-Touch phases.',
                '',
                '> This issue is auto-managed by the seeding workflow.',
                '',
                '_Child issues will be listed here after creation_.'
              ].join('\n'),
              labels: [`${labelPrefix}phase`],
              milestoneNumber
            });

            // ---- Create phases ----
            const created = [];
            for (const spec of phases) {
              created.push(await createOrGetIssue({
                title: (spec.title || '').trim(),
                body: spec.body || '',
                labels: spec.labels || [],
                milestoneNumber
              }));
            }

            // ---- Update epic with checklist ----
            const checklist = created.map(i => `- [ ] ${i.title}${i.number ? ` (#${i.number})` : ''}`).join('\n');
            const epicBody = ['Tracking epic for PB-Touch phases.', '', '### Phases', checklist, '', '> Use this epic to coordinate sequencing and verify acceptance criteria per phase.'].join('\n');

            if (!dryRun) {
              await github.rest.issues.update({ owner, repo, issue_number: epic.number, body: epicBody });
            } else {
              log('[DRY RUN] Would update epic body with phase checklist.');
            }

            log('✅ Seeding complete.');