#!/usr/bin/env python

import sys
import os
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '../..'))

from qtpy.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QPushButton, QHBoxLayout
from qtpy.QtCore import Qt

# Import the pin mapper widgets (without qtpyvcp dependencies for testing)
import yaml

class PinMapperDemo(QMainWindow):
    """
    Standalone demo of Pin Mapper functionality for testing
    """
    
    def __init__(self):
        super(PinMapperDemo, self).__init__()
        
        self.setWindowTitle("PB-Touch Pin Mapper Demo")
        self.setGeometry(100, 100, 800, 600)
        
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        layout = QVBoxLayout(central_widget)
        
        # Button layout
        button_layout = QHBoxLayout()
        
        test_hal_btn = QPushButton("Test HAL Generation")
        test_hal_btn.clicked.connect(self.testHALGeneration)
        button_layout.addWidget(test_hal_btn)
        
        test_yaml_btn = QPushButton("Test YAML Loading")
        test_yaml_btn.clicked.connect(self.testYAMLLoading)
        button_layout.addWidget(test_yaml_btn)
        
        layout.addLayout(button_layout)
        
        # Create a simple text area for output
        from qtpy.QtWidgets import QTextEdit
        self.output_text = QTextEdit()
        self.output_text.setReadOnly(True)
        layout.addWidget(self.output_text)
        
        self.log("Pin Mapper Demo initialized")
        
    def log(self, message):
        """Add message to output"""
        self.output_text.append(message)
        
    def testHALGeneration(self):
        """Test HAL generation functionality"""
        try:
            # Import the hal generator
            sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'pin_mapper'))
            from hal_generator import HALGenerator
            
            # Test mappings
            mappings = {
                'CycleStart': {
                    'signal': 'cycle-start',
                    'pin': 'hm2_7i76e.0.7i76.0.0.input-00',
                    'subsystem': 'input',
                    'direction': 'input',
                    'notes': 'Start program execution'
                },
                'FeedHold': {
                    'signal': 'feed-hold', 
                    'pin': 'hm2_7i76e.0.7i76.0.0.input-01',
                    'subsystem': 'input',
                    'direction': 'input',
                    'notes': 'Pause program execution'
                },
                'SpindleEnable': {
                    'signal': 'spindle-enable',
                    'pin': 'hm2_7i76e.0.7i76.0.0.output-00', 
                    'subsystem': 'spindle',
                    'direction': 'output',
                    'notes': 'Enable spindle motor'
                }
            }
            
            generator = HALGenerator(mappings)
            hal_content = generator.preview()
            
            self.log("=== HAL Generation Test ===")
            self.log(hal_content)
            
            # Test validation
            errors = generator.validate_mappings()
            if errors:
                self.log("Validation errors:")
                for error in errors:
                    self.log(f"  - {error}")
            else:
                self.log("Validation: PASSED")
                
        except Exception as e:
            self.log(f"HAL Generation Error: {e}")
            
    def testYAMLLoading(self):
        """Test YAML configuration loading"""
        try:
            config_file = os.path.join(os.path.dirname(__file__), '../../../configs/probe_basic/config/pinmap.d/default.yaml')
            
            if os.path.exists(config_file):
                with open(config_file, 'r') as f:
                    data = yaml.safe_load(f)
                    
                self.log("=== YAML Loading Test ===")
                self.log(f"Loaded config from: {config_file}")
                self.log(f"Version: {data.get('version', 'unknown')}")
                self.log(f"Generated by: {data.get('generated_by', 'unknown')}")
                
                mappings = data.get('mappings', {})
                self.log(f"Found {len(mappings)} mappings:")
                
                for function_name, mapping in mappings.items():
                    signal = mapping.get('signal', '')
                    pin = mapping.get('pin', '')
                    subsystem = mapping.get('subsystem', '')
                    self.log(f"  {function_name}: {signal} -> {pin} ({subsystem})")
                    
            else:
                self.log(f"Config file not found: {config_file}")
                
        except Exception as e:
            self.log(f"YAML Loading Error: {e}")


if __name__ == "__main__":
    app = QApplication(sys.argv)
    
    demo = PinMapperDemo()
    demo.show()
    
    sys.exit(app.exec_())